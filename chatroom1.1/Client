package chatroom;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.net.SocketException;
import java.net.UnknownHostException;

public class Client extends Frame{
    TextField tf = new TextField();

    TextArea ta = new TextArea();

    Socket s = null;
    DataOutputStream dos = null;
    DataInputStream dis = null;
    boolean bConnected = false;
    recvThread r = new recvThread();

    public static void main(String[] args) {
        new Client().createFrame();
    }

    /**
     * 创建窗口
     * 当关闭的时候，触发disconnect
     */
    private void createFrame() {
        this.setBounds(300,300,300,300);
        ta.setEditable(false);
        this.add(tf,BorderLayout.SOUTH);
        this.add(ta,BorderLayout.NORTH);
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                disconnect();
                System.exit(0);
            }
        });
        tf.addActionListener(new tfActionListener());
        this.pack();
        this.setVisible(true);
        connect();
        new Thread(r).start();
    }

    /**
     * tfActionListener实现一旦有输入到屏幕上的数据，就写入输入流中
     */
    class tfActionListener implements ActionListener{

        @Override
        public void actionPerformed(ActionEvent e) {
            String str = tf.getText();
            tf.setText("");
            try{
                dos.writeUTF(str);
                dos.flush();
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }
    }
    private void connect(){
        try{
            s = new Socket("127.0.0.1",8888);
            dos = new DataOutputStream(s.getOutputStream());
            dis = new DataInputStream(s.getInputStream());
            bConnected = true;
        } catch (UnknownHostException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * 关闭输入输出流与接口
     */
    private void disconnect() {
        try{
            dos.close();
            dis.close();
            s.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * recvThread是一个接收进程，在连接状态下
     * 读取输入端口的值输出到屏幕上
     */
    class recvThread implements Runnable{

        @Override
        public void run() {
            try{
                while (bConnected){
                    String str;
                    str = dis.readUTF();
                    ta.setText(ta.getText()+ str + '\n');
                }
            }catch (SocketException e){
                System.out.println("退出了");
            }catch (IOException e){
                e.printStackTrace();
            }
        }
    }
}
